<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>event-sourcing-payment-system (0.0.1)</title>
<date>2018-08-12 17:42:53 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2018-08-12 17:42:53 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<preface>
<title></title>
<simpara>Travis CI status:
<inlinemediaobject>
<imageobject>
<imagedata fileref="https://travis-ci.org/daggerok/event-sourcing-payment-system.svg?branch=master"/>
</imageobject>
<textobject><phrase>Build Status</phrase></textobject>
</inlinemediaobject></simpara>
</preface>
<chapter xml:id="introduction">
<title>Introduction</title>
<simpara>In progress: event-sourcing app using spring-boot + spring-cloud-kafka + kafka-streams</simpara>
<simpara>Read <link xl:href="https://daggerok.github.io/event-sourcing-payment-system">project reference documentation</link></simpara>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (kotlin-parent-multi-project)</simpara>
</chapter>
<chapter xml:id="prepare-kafka">
<title>Prepare kafka</title>
<formalpara>
<title>install spring boot cloud CLI</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">brew tap pivotal/tap
brew search spring
brew install springboot

spring install org.springframework.cloud:spring-cloud-cli:2.0.0.RELEASE

spring cloud kafka

# check if zookepper is running:
lsof -i:2181|awk '{print $2}'

# check if kafka is running:
lsof -i:9092|awk '{print $2}'</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="cqrs-and-event-sourcing-api-commands-queries-errors">
<title>CQRS and Event Sourcing API (commands, queries, errors)</title>
<formalpara>
<title>Commands REST API</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">sealed class Error(override val message: String) : RuntimeException(message)
sealed class Command
sealed class Event</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="commands-application">
<title>Commands application</title>
<formalpara>
<title>Including api project as included build using gradle composit builds approach</title>
<para>
<programlisting language="gradle" linenumbering="unnumbered">// file: settings.gradle
rootProject.name = 'commands-app'
enableFeaturePreview 'STABLE_PUBLISHING'

includeBuild('../api') {
  dependencySubstitution {
    substitute module('com.github.daggerok:api') with project(':')
  }
}

// file: gradle/java.gradle
allprojects {
  apply plugin: 'java'

  apply plugin: 'io.franzbecker.gradle-lombok'
  lombok.version = project.lombokVersion

  version = '0.0.1'
  group = 'com.github.daggerok'
  sourceCompatibility = targetCompatibility = "$javaVersion"

  defaultTasks 'clean', 'build'

  dependencies {
    implementation 'com.github.daggerok:api:0.0.1'
    // In java we trust...
    implementation "io.vavr:vavr:$vavrVersion"
  }
}</programlisting>
</para>
</formalpara>
<formalpara>
<title>Commands REST API</title>
<para>
<programlisting language="kotlin" linenumbering="unnumbered">@Configuration
class Rest {

  @Bean
  fun routes() = router {
    ("/").nest {
      contentType(MediaType.APPLICATION_JSON_UTF8)
      GET("/**") {
        val map = mapOf(
            "errors" to listOf(
                Error::class.java.name
            ),
            "commands" to listOf(
                Command::class.java.name
            )
        )
        ok().body(
            Mono.just(map), map.javaClass
        )
      }
    }
  }
}</programlisting>
</para>
</formalpara>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/event-sourcing-payment-system">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/event-sourcing-payment-system">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>